// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2020-06-10
@file:Suppress("MaxLineLength", "WildcardImport")

package com.hp.jipp.model

import com.hp.jipp.encoding.* // ktlint-disable no-wildcard-imports

/**
 * Data object corresponding to a "print-objects" collection as defined in:
 * [PWG5100.21](https://ftp.pwg.org/pub/pwg/candidates/cs-ipp3d11-20190329-5100.21.pdf).
 */
@Suppress("RedundantCompanionReference", "unused")
data class PrintObjects
constructor(
    var documentNumber: Int? = null,
    var objectOffset: ObjectOffset? = null,
    var objectSize: ObjectSize? = null,
    var objectUuid: java.net.URI? = null
) : AttributeCollection {

    /** Construct an empty [PrintObjects]. */
    constructor() : this(null, null, null, null)

    /** Produce an attribute list from members. */
    override val attributes: List<Attribute<*>> by lazy {
        listOfNotNull(
            documentNumber?.let { Types.documentNumber.of(it) },
            objectOffset?.let { Types.objectOffset.of(it) },
            objectSize?.let { Types.objectSize.of(it) },
            objectUuid?.let { Types.objectUuid.of(it) }
        )
    }

    /** Types for each member attribute. */
    object Types {
        @JvmField val documentNumber = IntType("document-number")
        @JvmField val objectOffset = AttributeCollection.Type("object-offset", ObjectOffset)
        @JvmField val objectSize = AttributeCollection.Type("object-size", ObjectSize)
        @JvmField val objectUuid = UriType("object-uuid")
    }

    /** Defines types for each member of [PrintObjects]. */
    companion object : AttributeCollection.Converter<PrintObjects> {
        override fun convert(attributes: List<Attribute<*>>): PrintObjects =
            PrintObjects(
                extractOne(attributes, Types.documentNumber),
                extractOne(attributes, Types.objectOffset),
                extractOne(attributes, Types.objectSize),
                extractOne(attributes, Types.objectUuid)
            )
    }

    /**
     * Data object corresponding to a "object-offset" collection.
     */
    @Suppress("RedundantCompanionReference", "unused")
    data class ObjectOffset
    constructor(
        var xOffset: Int? = null,
        var yOffset: Int? = null,
        var zOffset: Int? = null
    ) : AttributeCollection {

        /** Construct an empty [ObjectOffset]. */
        constructor() : this(null, null, null)

        /** Produce an attribute list from members. */
        override val attributes: List<Attribute<*>> by lazy {
            listOfNotNull(
                xOffset?.let { Types.xOffset.of(it) },
                yOffset?.let { Types.yOffset.of(it) },
                zOffset?.let { Types.zOffset.of(it) }
            )
        }

        /** Types for each member attribute. */
        object Types {
            @JvmField val xOffset = IntType("x-offset")
            @JvmField val yOffset = IntType("y-offset")
            @JvmField val zOffset = IntType("z-offset")
        }

        /** Defines types for each member of [ObjectOffset]. */
        companion object : AttributeCollection.Converter<ObjectOffset> {
            override fun convert(attributes: List<Attribute<*>>): ObjectOffset =
                ObjectOffset(
                    extractOne(attributes, Types.xOffset),
                    extractOne(attributes, Types.yOffset),
                    extractOne(attributes, Types.zOffset)
                )
        }
        override fun toString() = "ObjectOffset(${attributes.joinToString()})"
    }

    /**
     * Data object corresponding to a "object-size" collection.
     */
    @Suppress("RedundantCompanionReference", "unused")
    data class ObjectSize
    constructor(
        var xDimension: Int? = null,
        var yDimension: Int? = null,
        var zDimension: Int? = null
    ) : AttributeCollection {

        /** Construct an empty [ObjectSize]. */
        constructor() : this(null, null, null)

        /** Produce an attribute list from members. */
        override val attributes: List<Attribute<*>> by lazy {
            listOfNotNull(
                xDimension?.let { Types.xDimension.of(it) },
                yDimension?.let { Types.yDimension.of(it) },
                zDimension?.let { Types.zDimension.of(it) }
            )
        }

        /** Types for each member attribute. */
        object Types {
            @JvmField val xDimension = IntType("x-dimension")
            @JvmField val yDimension = IntType("y-dimension")
            @JvmField val zDimension = IntType("z-dimension")
        }

        /** Defines types for each member of [ObjectSize]. */
        companion object : AttributeCollection.Converter<ObjectSize> {
            override fun convert(attributes: List<Attribute<*>>): ObjectSize =
                ObjectSize(
                    extractOne(attributes, Types.xDimension),
                    extractOne(attributes, Types.yDimension),
                    extractOne(attributes, Types.zDimension)
                )
        }
        override fun toString() = "ObjectSize(${attributes.joinToString()})"
    }
    override fun toString() = "PrintObjects(${attributes.joinToString()})"
}
