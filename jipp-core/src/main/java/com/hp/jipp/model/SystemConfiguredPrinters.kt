// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2020-02-20
@file:Suppress("MaxLineLength", "WildcardImport")

package com.hp.jipp.model

import com.hp.jipp.encoding.* // ktlint-disable no-wildcard-imports

/**
 * Data object corresponding to a "system-configured-printers" collection as defined in:
 * [PWG5100.22](https://ftp.pwg.org/pub/pwg/candidates/cs-ippsystem10-20191122-5100.22.pdf).
 */
@Suppress("RedundantCompanionReference", "unused")
data class SystemConfiguredPrinters
constructor(
    var printerId: Int? = null,
    var printerInfo: String? = null,
    var printerIsAcceptingJobs: Boolean? = null,
    var printerName: String? = null,
    /** May contain any keyword from [PrinterServiceType]. */
    var printerServiceType: String? = null,
    var printerState: PrinterState? = null,
    /** May contain any keyword from [PrinterStateReason]. */
    var printerStateReasons: List<String>? = null,
    var printerXriSupported: PrinterXriSupported? = null
) : AttributeCollection {

    /** Construct an empty [SystemConfiguredPrinters]. */
    constructor() : this(null, null, null, null, null, null, null, null)

    /** Produce an attribute list from members. */
    override val attributes: List<Attribute<*>> by lazy {
        listOfNotNull(
            printerId?.let { Types.printerId.of(it) },
            printerInfo?.let { Types.printerInfo.of(it) },
            printerIsAcceptingJobs?.let { Types.printerIsAcceptingJobs.of(it) },
            printerName?.let { Types.printerName.of(it) },
            printerServiceType?.let { Types.printerServiceType.of(it) },
            printerState?.let { Types.printerState.of(it) },
            printerStateReasons?.let { Types.printerStateReasons.of(it) },
            printerXriSupported?.let { Types.printerXriSupported.of(it) }
        )
    }

    /** Types for each member attribute. */
    object Types {
        @JvmField val printerId = IntType("printer-id")
        @JvmField val printerInfo = TextType("printer-info")
        @JvmField val printerIsAcceptingJobs = BooleanType("printer-is-accepting-jobs")
        @JvmField val printerName = NameType("printer-name")
        @JvmField val printerServiceType = KeywordType("printer-service-type")
        /**
         * "printer-state" member type.
         */
        @JvmField val printerState = PrinterState.Type("printer-state")
        @JvmField val printerStateReasons = KeywordType.Set("printer-state-reasons")
        @JvmField val printerXriSupported = AttributeCollection.Type("printer-xri-supported", PrinterXriSupported)
    }

    /** Defines types for each member of [SystemConfiguredPrinters] */
    companion object : AttributeCollection.Converter<SystemConfiguredPrinters> {
        override fun convert(attributes: List<Attribute<*>>): SystemConfiguredPrinters =
            SystemConfiguredPrinters(
                extractOne(attributes, Types.printerId),
                extractOne(attributes, Types.printerInfo)?.value,
                extractOne(attributes, Types.printerIsAcceptingJobs),
                extractOne(attributes, Types.printerName)?.value,
                extractOne(attributes, Types.printerServiceType),
                extractOne(attributes, Types.printerState),
                extractAll(attributes, Types.printerStateReasons),
                extractOne(attributes, Types.printerXriSupported)
            )
    }
    override fun toString() = "SystemConfiguredPrinters(${attributes.joinToString()})"
}
