// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2020-02-20
@file:Suppress("MaxLineLength", "WildcardImport")

package com.hp.jipp.model

import com.hp.jipp.encoding.* // ktlint-disable no-wildcard-imports

/**
 * Data object corresponding to a "power-calendar-policy-col" collection as defined in:
 * [PWG5100.22](https://ftp.pwg.org/pub/pwg/candidates/cs-ippsystem10-20191122-5100.22.pdf).
 */
@Suppress("RedundantCompanionReference", "unused")
data class PowerCalendarPolicyCol
constructor(
    var calendarId: Int? = null,
    var dayOfMonth: Int? = null,
    var dayOfWeek: Int? = null,
    var hour: Int? = null,
    var minute: Int? = null,
    var month: Int? = null,
    var requestPowerState: String? = null,
    var runOnce: Boolean? = null
) : AttributeCollection {

    /** Construct an empty [PowerCalendarPolicyCol]. */
    constructor() : this(null, null, null, null, null, null, null, null)

    /** Produce an attribute list from members. */
    override val attributes: List<Attribute<*>> by lazy {
        listOfNotNull(
            calendarId?.let { Types.calendarId.of(it) },
            dayOfMonth?.let { Types.dayOfMonth.of(it) },
            dayOfWeek?.let { Types.dayOfWeek.of(it) },
            hour?.let { Types.hour.of(it) },
            minute?.let { Types.minute.of(it) },
            month?.let { Types.month.of(it) },
            requestPowerState?.let { Types.requestPowerState.of(it) },
            runOnce?.let { Types.runOnce.of(it) }
        )
    }

    /** Types for each member attribute. */
    object Types {
        @JvmField val calendarId = IntType("calendar-id")
        @JvmField val dayOfMonth = IntType("day-of-month")
        @JvmField val dayOfWeek = IntType("day-of-week")
        @JvmField val hour = IntType("hour")
        @JvmField val minute = IntType("minute")
        @JvmField val month = IntType("month")
        @JvmField val requestPowerState = KeywordType("request-power-state")
        @JvmField val runOnce = BooleanType("run-once")
    }

    /** Defines types for each member of [PowerCalendarPolicyCol] */
    companion object : AttributeCollection.Converter<PowerCalendarPolicyCol> {
        override fun convert(attributes: List<Attribute<*>>): PowerCalendarPolicyCol =
            PowerCalendarPolicyCol(
                extractOne(attributes, Types.calendarId),
                extractOne(attributes, Types.dayOfMonth),
                extractOne(attributes, Types.dayOfWeek),
                extractOne(attributes, Types.hour),
                extractOne(attributes, Types.minute),
                extractOne(attributes, Types.month),
                extractOne(attributes, Types.requestPowerState),
                extractOne(attributes, Types.runOnce)
            )
    }
    override fun toString() = "PowerCalendarPolicyCol(${attributes.joinToString()})"
}
