// Global settings
buildscript {
    ext.kotlin_version = '1.2.30'
    ext.dokka_version = '0.9.16'
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url 'https://maven.google.com'
        }
    }
    dependencies {
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.9"
        classpath "gradle.plugin.pl.squirrel:classycle-gradle-plugin:1.2"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"

        classpath "gradle.plugin.org.jlleitschuh.gradle:ktlint-gradle:2.1.1"
        classpath "gradle.plugin.io.gitlab.arturbosch.detekt:detekt-gradle-plugin:1.0.0.RC1"
    }
}

apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'net.ltgt.apt'
apply plugin: 'jacoco'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'org.jlleitschuh.gradle.ktlint'
apply plugin: 'io.gitlab.arturbosch.detekt'

repositories {
    jcenter()
    maven() {
        url "https://plugins.gradle.org/m2/"
    }
}

targetCompatibility = 1.6
sourceCompatibility = 1.6

// This hack puts testing resource files where we can get to them
task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources/printer"
    into "${buildDir}/classes/test/printer"
}
processTestResources.dependsOn copyTestResources
task cleanTestResources(type: Delete) {
    delete fileTree("${buildDir}/classes/test/printer") {
        include '**/*.bin'
    }
}
test.finalizedBy cleanTestResources

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

dokka {
    outputDirectory = "$buildDir/javadoc"
    outputFormat = "javadoc"
    externalDocumentationLink {
        url = new URL("http://google.github.io/guava/releases/20.0/api/docs")
        url = new URL("http://docs.oracle.com/javase/7/docs/api/")
    }
}

test.finalizedBy jacocoTestReport

test {
    testLogging {
        events "failed"
        showExceptions true
        exceptionFormat "full"
    }
}

jacocoTestReport {
    reports {
        xml.enabled true // coveralls plugin depends on xml format report
        html.enabled true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/AutoValue_**'])
        })
    }
}

ktlint {
    version = '0.10.0'
}

detekt {
    profile("main") {
        baseline = "$projectDir/src/config/baseline.xml"
        input = "$projectDir/src/main"
        output = "$buildDir/reports/detekt"
    }
}

// Graph dependencies
task graphDeps(type: Exec) {
    commandLine 'script/graphDeps'
}

configure(graphDeps) {
    group = "Verification"
    description = "Create a dependency graph"
}

afterEvaluate {
    graphDeps.dependsOn classes

    check.dependsOn ktlintCheck
    check.dependsOn detektCheck
    check.dependsOn graphDeps
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.8.9'
}
